const db = require('../firestore');

async function unifyProfileIds() {
    console.log('üöÄ Rozpoczynam ujednolicanie ID profili...');
    const profilesRef = db.collection('foodTrucks');
    const snapshot = await profilesRef.get();

    if (snapshot.empty) {
        console.log('Brak profili do przetworzenia.');
        return;
    }

    const updates = [];
    let counter = 2000; // Zaczynamy od wysokiej liczby dla nowych ID

    snapshot.forEach(doc => {
        const data = doc.data();
        const docId = doc.id;

        // Sprawdzamy, czy pole `profile_id` ju≈º istnieje i jest numerem
        if (typeof data.profile_id === 'number') {
            console.log(`‚úÖ Profil ${docId} ma ju≈º poprawne ID: ${data.profile_id}. Pomijam.`);
            return;
        }

        // Pr√≥bujemy przekonwertowaƒá ID dokumentu na liczbƒô
        const numericId = parseInt(docId, 10);

        if (!isNaN(numericId)) {
            // Je≈õli ID dokumentu jest numeryczne, u≈ºywamy go
            console.log(`üîß Profil ${docId} otrzymuje numeryczne ID: ${numericId}`);
            updates.push(doc.ref.update({ profile_id: numericId }));
        } else {
            // Je≈õli ID dokumentu to tekst, przypisujemy nowe, unikalne ID
            console.log(`üîß Profil ${docId} (tekstowe ID) otrzymuje nowe numeryczne ID: ${counter}`);
            updates.push(doc.ref.update({ profile_id: counter }));
            counter++;
        }
    });

    if (updates.length > 0) {
        console.log(`\nZapisywanie ${updates.length} aktualizacji w bazie...`);
        await Promise.all(updates);
        console.log('‚úÖ Ujednolicanie zako≈Ñczone!');
    } else {
        console.log('Wszystkie profile by≈Çy ju≈º sp√≥jne.');
    }
}

unifyProfileIds().catch(console.error);